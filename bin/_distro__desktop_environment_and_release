#!/bin/bash


contains() {
    string="$1"
    substring="$2"
    if test "${string#*$substring}" != "$string"
    then
        return 0    # $substring is in $string
    else
        return 1    # $substring is not in $string
    fi
}


log_exports()
{


echo "__SYSTEM_DISTRO is $__SYSTEM_DISTRO"
echo "__SYSTEM_DISTRO_FAMILY is $__SYSTEM_DISTRO_FAMILY"
echo "__SYSTEM_DISTRO_BRANCH is $__SYSTEM_DISTRO_BRANCH"
echo "__SYSTEM_DISTRO_RELEASE is $__SYSTEM_DISTRO_RELEASE"
echo "__SYSTEM_DESKTOP_ENVIRONMENT is $__SYSTEM_DESKTOP_ENVIRONMENT"
echo "__SYSTEM_SLASHED_OPERATING_SYSTEM is $__SYSTEM_SLASHED_OPERATING_SYSTEM"
echo "__SYSTEM_UNDERSCORE_OPERATING_SYSTEM is $__SYSTEM_UNDERSCORE_OPERATING_SYSTEM"
echo "__SYSTEM_SUDO_INSTALL is $__SYSTEM_SUDO_INSTALL"

}


if [ -f /etc/os-release ]; then

    # freedesktop.org and systemd

    . /etc/os-release

    __SYSTEM_DISTRO="$ID"
    __SYSTEM_DISTRO_BRANCH="$VARIANT_ID"
    __SYSTEM_DESKTOP_ENVIRONMENT="$__SYSTEM_DISTRO_BRANCH"
    __SYSTEM_DISTRO_RELEASE="$VERSION_ID"
    __SYSTEM_DISTRO_FAMILY="$ID_LIKE"

    if [ "$__SYSTEM_DISTRO_FAMILY" = "arch" ]; then

        . /etc/lsb-release

        __SYSTEM_DISTRO_RELEASE=$DISTRIB_RELEASE


    fi

elif type lsb_release >/dev/null 2>&1; then

    # linuxbase.org

    OS=$(lsb_release -si)
    VER=$(lsb_release -sr)

elif [ -f /etc/lsb-release ]; then
    
    # For some versions of Debian/Ubuntu without lsb_release command
    
    . /etc/lsb-release

    OS=$DISTRIB_ID
    VER=$DISTRIB_RELEASE

elif [ -f /etc/debian_version ]; then
    
    # Older Debian/Ubuntu/etc.
    
    OS=Debian
    VER=$(cat /etc/debian_version)

elif [ -f /etc/SuSe-release ]; then
    
    # Older SuSE/etc.
    
    ...


elif [ -f /etc/redhat-release ]; then
    
    # Older Red Hat, CentOS, etc.
    
    ...

else
    
    # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
    
    OS=$(uname -s)
    VER=$(uname -r)

fi 


if [ -z "$__SYSTEM_DISTRO_FAMILY" ]; then

	__SYSTEM_DISTRO_FAMILY="$__SYSTEM_DISTRO"

fi


if [ "$__SYSTEM_DISTRO" = "ubuntu" ]; then

    __SYSTEM_DISTRO_FAMILY="debian"

elif [ "$__SYSTEM_DISTRO" = "debian" ]; then

    __SYSTEM_DISTRO_FAMILY="debian"

elif [ "$__SYSTEM_DISTRO" = "opensuse-tumbleweed" ]; then

    __SYSTEM_DISTRO_FAMILY="zypper"

elif [ "$__SYSTEM_DISTRO" = "opensuse-leap" ]; then

    __SYSTEM_DISTRO_FAMILY="zypper"

fi


if [ "$__SYSTEM_DISTRO" = "fedora" ]; then

    if [ "$__SYSTEM_DISTRO_BRANCH" = "workstation" ]; then

        __SYSTEM_DESKTOP_ENVIRONMENT="gnome"

    fi

fi


if [ -z "$__SYSTEM_DESKTOP_ENVIRONMENT" ]; then

    # echo "DESKTOP_ENVIRONMENT is empty here"

    if [ "$__SYSTEM_DISTRO_FAMILY" = "debian" ] || [ "$__SYSTEM_DISTRO_FAMILY" = "zypper" ] || [ "$__SYSTEM_DISTRO_FAMILY" = "arch" ]; then

        # echo "DISTRO_FAMILY is debian, zypper or arch"

	    __SYSTEM_LOWER_CASE_CURRENT_DESKTOP="$(echo $XDG_CURRENT_DESKTOP | tr 'A-Z' 'a-z')"

        # echo "lower case xdg_current_desktop is $__SYSTEM_LOWER_CASE_CURRENT_DESKTOP"

        if contains $__SYSTEM_LOWER_CASE_CURRENT_DESKTOP "gnome"; then

            # echo "lower case xdg_current_desktop contains gnome"

            __SYSTEM_DESKTOP_ENVIRONMENT="gnome"

        elif contains $__SYSTEM_LOWER_CASE_CURRENT_DESKTOP "kde"; then

            # echo "lower case xdg_current_desktop contains gnome"

            __SYSTEM_DESKTOP_ENVIRONMENT="kde"

        elif contains $__SYSTEM_LOWER_CASE_CURRENT_DESKTOP "lxde"; then

            # echo "lower case xdg_current_desktop contains lxde"

            __SYSTEM_DESKTOP_ENVIRONMENT="lxde"

        fi

        if [ "$__SYSTEM_DISTRO_FAMILY" = "debian" ]; then

            __SYSTEM_DISTRO_BRANCH="${__SYSTEM_DESKTOP_ENVIRONMENT}"

        elif [ "$__SYSTEM_DISTRO_FAMILY" = "zypper" ]; then

            __SYSTEM_DISTRO_BRANCH="${__SYSTEM_DESKTOP_ENVIRONMENT}"

        elif [ "$__SYSTEM_DISTRO_FAMILY" = "arch" ]; then

            __SYSTEM_DISTRO_BRANCH="${__SYSTEM_DESKTOP_ENVIRONMENT}"

        fi

    fi

fi


if [ "$__SYSTEM_DISTRO" = "ubuntu" ]; then

   if [ "${__SYSTEM_DESKTOP_ENVIRONMENT}" = "kde" ]; then

    __SYSTEM_SLASHED_OPERATING_SYSTEM="kubuntu/$__SYSTEM_DISTRO_RELEASE"

   else

    __SYSTEM_SLASHED_OPERATING_SYSTEM="$__SYSTEM_DISTRO/$__SYSTEM_DISTRO_RELEASE"

   fi

else

    __SYSTEM_SLASHED_OPERATING_SYSTEM="$__SYSTEM_DISTRO/$__SYSTEM_DISTRO_BRANCH/$__SYSTEM_DISTRO_RELEASE"

fi


if [ "$__SYSTEM_DISTRO_FAMILY" = "debian" ]; then

    __SYSTEM_SUDO_INSTALL="sudo apt -y install"

elif [ "$__SYSTEM_DISTRO_FAMILY" = "fedora" ]; then

    __SYSTEM_SUDO_INSTALL="sudo dnf -y install"

elif [ "$__SYSTEM_DISTRO_FAMILY" = "zypper" ]; then

    __SYSTEM_SUDO_INSTALL="sudo zypper --non-interactive install"

fi


if [ "${__SYSTEM_DESKTOP_ENVIRONMENT}" = "kde" ]; then

    __SYSTEM_TERMINAL=konsole

else

    __SYSTEM_TERMINAL=gnome-terminal

fi


__SYSTEM_UNDERSCORE_OPERATING_SYSTEM=$(echo $__SYSTEM_SLASHED_OPERATING_SYSTEM | tr / _ )


export __SYSTEM_DISTRO
export __SYSTEM_DISTRO_FAMILY
export __SYSTEM_DISTRO_BRANCH
export __SYSTEM_DISTRO_RELEASE
export __SYSTEM_DESKTOP_ENVIRONMENT
export __SYSTEM_SLASHED_OPERATING_SYSTEM
export __SYSTEM_UNDERSCORE_OPERATING_SYSTEM
export __SYSTEM_SUDO_INSTALL
export __SYSTEM_TERMINAL


# log_exports


